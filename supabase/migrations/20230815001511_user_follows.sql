CREATE TABLE "public"."user_follows" (
    "id" bigint NOT NULL,
    "requester" "uuid" NOT NULL,
    "requested" "uuid",
    "accepted" boolean DEFAULT false,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);

ALTER TABLE "public"."user_follows" OWNER TO "postgres";

ALTER TABLE "public"."user_follows" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_follows_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."user_follows"
    ADD CONSTRAINT "user_follows_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_follows"
    ADD CONSTRAINT "user_follows_requested_fkey" FOREIGN KEY ("requested") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_follows"
    ADD CONSTRAINT "user_follows_requester_fkey" FOREIGN KEY ("requester") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;

ALTER TABLE "public"."user_follows" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable insert for authenticated users only" ON "public"."user_follows" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Exclusão de follow" ON "public"."user_follows" FOR DELETE TO "anon", "authenticated" USING ((("requester" = "auth"."uid"()) OR ("requested" = "auth"."uid"())));

CREATE POLICY "Obtenção dos follows " ON "public"."user_follows" FOR SELECT TO "anon", "authenticated" USING ((("requester" = "auth"."uid"()) OR ("requested" = "auth"."uid"())));

GRANT ALL ON TABLE "public"."user_follows" TO "anon";
GRANT ALL ON TABLE "public"."user_follows" TO "authenticated";
GRANT ALL ON TABLE "public"."user_follows" TO "service_role";

GRANT ALL ON SEQUENCE "public"."user_follows_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_follows_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_follows_id_seq" TO "service_role";