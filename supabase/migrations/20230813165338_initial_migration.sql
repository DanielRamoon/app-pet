create extension if not exists "hstore" with schema "extensions";

create extension if not exists "insert_username" with schema "extensions";

create extension if not exists "moddatetime" with schema "extensions";

create extension if not exists "postgis" with schema "extensions";

create extension if not exists "postgis_sfcgal" with schema "extensions";

create extension if not exists "supautils" with schema "extensions";

create table "public"."animal_types" (
	"id" bigint generated by default as identity not null,
	"description" text not null,
	"inserted_at" timestamp with time zone not null default timezone('utc' :: text, now()),
	"updated_at" timestamp with time zone not null default timezone('utc' :: text, now())
);

alter table
	"public"."animal_types" enable row level security;

create table "public"."breeds" (
	"id" bigint generated by default as identity not null,
	"inserted_at" timestamp with time zone not null default timezone('utc' :: text, now()),
	"updated_at" timestamp with time zone not null default timezone('utc' :: text, now()),
	"animal_type" bigint not null,
	"description" text not null,
	"wiki_url" text not null,
	"meaning" text,
	"fci_classification" text,
	"extra" json
);

alter table
	"public"."breeds" enable row level security;

create table "public"."health_medicines" (
	"id" bigint generated by default as identity not null,
	"health_id" uuid not null,
	"description" text not null,
	"dose" bigint not null,
	"amount" bigint not null,
	"created_at" timestamp with time zone not null default now(),
	"updated_at" timestamp with time zone not null default now()
);

alter table
	"public"."health_medicines" enable row level security;

create table "public"."health_vaccines" (
	"id" uuid not null default uuid_generate_v4(),
	"health_id" uuid not null,
	"description" text not null,
	"created_at" timestamp with time zone default now(),
	"updated_at" timestamp with time zone not null default now()
);

alter table
	"public"."health_vaccines" enable row level security;

create table "public"."locale_cities" (
	"id" bigint generated by default as identity not null,
	"state_id" bigint not null,
	"name" text,
	"created_at" timestamp with time zone default now()
);

alter table
	"public"."locale_cities" enable row level security;

create table "public"."locale_countries" (
	"id" bigint generated by default as identity not null,
	"name" text not null,
	"iso" text not null,
	"phone_code" text not null,
	"tz" jsonb,
	"emoji" text,
	"extras" jsonb not null,
	"created_at" timestamp with time zone not null default now()
);

alter table
	"public"."locale_countries" enable row level security;

create table "public"."locale_states" (
	"id" bigint generated by default as identity not null,
	"country_id" bigint not null,
	"name" text not null,
	"state_code" text not null,
	"type" text,
	"created_at" timestamp with time zone default now()
);

alter table
	"public"."locale_states" enable row level security;

create table "public"."map_places" (
	"id" uuid not null default gen_random_uuid(),
	"name" text not null,
	"phones" text [],
	"opening_hours" jsonb default '{}' :: jsonb,
	"fl_pet_friendly" boolean default false,
	"created_at" timestamp without time zone default now(),
	"updated_at" timestamp without time zone not null default now(),
	"created_by" uuid,
	"updated_by" uuid
);

create table "public"."pets" (
	"id" uuid not null default uuid_generate_v4(),
	"user_id" uuid not null,
	"breed_id_old" bigint,
	"name" text not null,
	"birth_date" date,
	"gender" smallint not null,
	"has_stud_book" boolean not null default false,
	"created_at" timestamp with time zone default now(),
	"updated_at" timestamp with time zone not null,
	"deleted_at" timestamp with time zone,
	"type" smallint not null default '6' :: smallint,
	"description" text,
	"breed" text
);

alter table
	"public"."pets" enable row level security;

create table "public"."pets_health" (
	"id" uuid not null default uuid_generate_v4(),
	"pet_id" uuid not null,
	"weight" double precision not null default '0' :: double precision,
	"height" double precision not null default '0' :: double precision,
	"length" double precision not null default '0' :: double precision,
	"created_at" timestamp with time zone not null default now(),
	"updated_at" timestamp with time zone not null default now()
);

alter table
	"public"."pets_health" enable row level security;

create table "public"."pets_photos" (
	"id" bigint generated by default as identity not null,
	"pet_id" uuid not null,
	"photo_url" text not null,
	"is_default" boolean not null default false,
	"created_at" timestamp with time zone not null default now(),
	"updated_at" timestamp with time zone not null default now()
);

alter table
	"public"."pets_photos" enable row level security;

create table "public"."pets_walks" (
	"id" uuid not null default uuid_generate_v4(),
	"pet_id" uuid not null,
	"date_start" timestamp with time zone not null default now(),
	"date_end" timestamp with time zone,
	"distance" jsonb not null,
	"created_at" timestamp with time zone not null default now(),
	"updated_at" timestamp with time zone not null default now(),
	"duration" integer not null default 0,
	"total_distance" jsonb not null default '{"humanDistance": 0, "animalDistance": 0}' :: jsonb
);

alter table
	"public"."pets_walks" enable row level security;

create table "public"."profiles" (
	"id" uuid not null,
	"full_name" text default '' :: text,
	"birth_date" date not null,
	"gender" smallint not null,
	"address" json,
	"user_name" text,
	"settings" json,
	"avatar_url" text,
	"created_at" timestamp with time zone default now(),
	"updated_at" timestamp with time zone default now(),
	"pronouns" smallint,
	"verified" boolean not null default false,
	"disabled" boolean not null default false,
	"phones" jsonb,
	"completed" boolean not null default false,
	"private" boolean not null default false
);

alter table
	"public"."profiles" enable row level security;

create table "public"."vaccines_doses" (
	"id" uuid not null default uuid_generate_v4(),
	"vaccine_id" uuid not null,
	"dose" bigint,
	"injection_date" date,
	"created_at" timestamp with time zone not null default now(),
	"updated_at" timestamp with time zone not null default now(),
	"created_by" uuid not null,
	"updated_by" uuid not null
);

alter table
	"public"."vaccines_doses" enable row level security;

CREATE UNIQUE INDEX animal_types_pkey ON public.animal_types USING btree (id);

CREATE UNIQUE INDEX breeds_pkey ON public.breeds USING btree (id);

CREATE UNIQUE INDEX health_medicines_pkey ON public.health_medicines USING btree (id);

CREATE UNIQUE INDEX health_vaccines_pkey ON public.health_vaccines USING btree (id);

CREATE UNIQUE INDEX locale_cities_pkey ON public.locale_cities USING btree (id);

CREATE UNIQUE INDEX locale_countries_pkey ON public.locale_countries USING btree (id);

CREATE UNIQUE INDEX locale_states_pkey ON public.locale_states USING btree (id);

CREATE UNIQUE INDEX map_places_pk ON public.map_places USING btree (id);

CREATE UNIQUE INDEX pets_health_pet_id_key ON public.pets_health USING btree (pet_id);

CREATE UNIQUE INDEX pets_health_pkey ON public.pets_health USING btree (id);

CREATE UNIQUE INDEX pets_photos_pkey ON public.pets_photos USING btree (id);

CREATE UNIQUE INDEX pets_pkey ON public.pets USING btree (id);

CREATE UNIQUE INDEX pets_walks_pkey ON public.pets_walks USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX profiles_username_key ON public.profiles USING btree (user_name);

CREATE UNIQUE INDEX vaccines_doses_injection_date_key ON public.vaccines_doses USING btree (injection_date);

CREATE UNIQUE INDEX vaccines_doses_pkey ON public.vaccines_doses USING btree (id);

alter table
	"public"."animal_types"
add
	constraint "animal_types_pkey" PRIMARY KEY using index "animal_types_pkey";

alter table
	"public"."breeds"
add
	constraint "breeds_pkey" PRIMARY KEY using index "breeds_pkey";

alter table
	"public"."health_medicines"
add
	constraint "health_medicines_pkey" PRIMARY KEY using index "health_medicines_pkey";

alter table
	"public"."health_vaccines"
add
	constraint "health_vaccines_pkey" PRIMARY KEY using index "health_vaccines_pkey";

alter table
	"public"."locale_cities"
add
	constraint "locale_cities_pkey" PRIMARY KEY using index "locale_cities_pkey";

alter table
	"public"."locale_countries"
add
	constraint "locale_countries_pkey" PRIMARY KEY using index "locale_countries_pkey";

alter table
	"public"."locale_states"
add
	constraint "locale_states_pkey" PRIMARY KEY using index "locale_states_pkey";

alter table
	"public"."map_places"
add
	constraint "map_places_pk" PRIMARY KEY using index "map_places_pk";

alter table
	"public"."pets"
add
	constraint "pets_pkey" PRIMARY KEY using index "pets_pkey";

alter table
	"public"."pets_health"
add
	constraint "pets_health_pkey" PRIMARY KEY using index "pets_health_pkey";

alter table
	"public"."pets_photos"
add
	constraint "pets_photos_pkey" PRIMARY KEY using index "pets_photos_pkey";

alter table
	"public"."pets_walks"
add
	constraint "pets_walks_pkey" PRIMARY KEY using index "pets_walks_pkey";

alter table
	"public"."profiles"
add
	constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table
	"public"."vaccines_doses"
add
	constraint "vaccines_doses_pkey" PRIMARY KEY using index "vaccines_doses_pkey";

alter table
	"public"."breeds"
add
	constraint "breeds_animal_type_fkey" FOREIGN KEY (animal_type) REFERENCES animal_types(id) not valid;

alter table
	"public"."breeds" validate constraint "breeds_animal_type_fkey";

alter table
	"public"."health_medicines"
add
	constraint "health_medicines_health_id_fkey" FOREIGN KEY (health_id) REFERENCES pets_health(id) ON DELETE CASCADE not valid;

alter table
	"public"."health_medicines" validate constraint "health_medicines_health_id_fkey";

alter table
	"public"."health_vaccines"
add
	constraint "health_vaccines_health_id_fkey" FOREIGN KEY (health_id) REFERENCES pets_health(id) ON DELETE CASCADE not valid;

alter table
	"public"."health_vaccines" validate constraint "health_vaccines_health_id_fkey";

alter table
	"public"."locale_cities"
add
	constraint "locale_cities_state_id_fkey" FOREIGN KEY (state_id) REFERENCES locale_states(id) not valid;

alter table
	"public"."locale_cities" validate constraint "locale_cities_state_id_fkey";

alter table
	"public"."locale_states"
add
	constraint "locale_states_country_id_fkey" FOREIGN KEY (country_id) REFERENCES locale_countries(id) not valid;

alter table
	"public"."locale_states" validate constraint "locale_states_country_id_fkey";

alter table
	"public"."map_places"
add
	constraint "map_places_users_id_fk" FOREIGN KEY (created_by) REFERENCES auth.users(id) not valid;

alter table
	"public"."map_places" validate constraint "map_places_users_id_fk";

alter table
	"public"."map_places"
add
	constraint "map_places_users_id_fk2" FOREIGN KEY (updated_by) REFERENCES auth.users(id) not valid;

alter table
	"public"."map_places" validate constraint "map_places_users_id_fk2";

alter table
	"public"."pets"
add
	constraint "pets_breed_id_old_fkey" FOREIGN KEY (breed_id_old) REFERENCES breeds(id) not valid;

alter table
	"public"."pets" validate constraint "pets_breed_id_old_fkey";

alter table
	"public"."pets"
add
	constraint "pets_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) not valid;

alter table
	"public"."pets" validate constraint "pets_user_id_fkey";

alter table
	"public"."pets_health"
add
	constraint "pets_health_pet_id_fkey" FOREIGN KEY (pet_id) REFERENCES pets(id) ON DELETE CASCADE not valid;

alter table
	"public"."pets_health" validate constraint "pets_health_pet_id_fkey";

alter table
	"public"."pets_health"
add
	constraint "pets_health_pet_id_key" UNIQUE using index "pets_health_pet_id_key";

alter table
	"public"."pets_photos"
add
	constraint "pets_photos_pet_id_fkey" FOREIGN KEY (pet_id) REFERENCES pets(id) ON DELETE CASCADE not valid;

alter table
	"public"."pets_photos" validate constraint "pets_photos_pet_id_fkey";

alter table
	"public"."pets_walks"
add
	constraint "pets_walks_pet_id_fkey" FOREIGN KEY (pet_id) REFERENCES pets(id) ON DELETE CASCADE not valid;

alter table
	"public"."pets_walks" validate constraint "pets_walks_pet_id_fkey";

alter table
	"public"."profiles"
add
	constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table
	"public"."profiles" validate constraint "profiles_id_fkey";

alter table
	"public"."vaccines_doses"
add
	constraint "vaccines_doses_injection_date_key" UNIQUE using index "vaccines_doses_injection_date_key";

alter table
	"public"."vaccines_doses"
add
	constraint "vaccines_doses_users_id_fk" FOREIGN KEY (created_by) REFERENCES auth.users(id) not valid;

alter table
	"public"."vaccines_doses" validate constraint "vaccines_doses_users_id_fk";

alter table
	"public"."vaccines_doses"
add
	constraint "vaccines_doses_users_id_fk2" FOREIGN KEY (updated_by) REFERENCES auth.users(id) not valid;

alter table
	"public"."vaccines_doses" validate constraint "vaccines_doses_users_id_fk2";

alter table
	"public"."vaccines_doses"
add
	constraint "vaccines_doses_vaccine_id_fkey" FOREIGN KEY (vaccine_id) REFERENCES health_vaccines(id) ON DELETE CASCADE not valid;

alter table
	"public"."vaccines_doses" validate constraint "vaccines_doses_vaccine_id_fkey";

create policy "Enable read access for all users" on "public"."animal_types" as permissive for
select
	to public using (true);

create policy "Enable insert for authenticated users only" on "public"."breeds" as permissive for
insert
	to authenticated with check (
		(
			auth.uid() = '9c28960f-10f7-4cc7-af10-0828319db3df' :: uuid
		)
	);

create policy "Enable read access for all users" on "public"."breeds" as permissive for
select
	to public using (true);

create policy "Enable update for users based on email" on "public"."breeds" as permissive for
update
	to authenticated using (
		(
			auth.uid() = '9c28960f-10f7-4cc7-af10-0828319db3df' :: uuid
		)
	) with check (true);

create policy "Enable read access for all users" on "public"."health_medicines" as permissive for
select
	to authenticated using (true);

create policy "delete_pet_medicines" on "public"."health_medicines" as permissive for delete to authenticated using (
	(
		health_id IN (
			SELECT
				pets_health_1.id
			FROM
				pets_health pets_health_1
			WHERE
				(
					pets_health_1.pet_id IN (
						SELECT
							pets.id
						FROM
							pets
						WHERE
							(pets.user_id = auth.uid())
					)
				)
		)
	)
);

create policy "insert_pet_medicines" on "public"."health_medicines" as permissive for
insert
	to authenticated with check (
		(
			health_id IN (
				SELECT
					pets_health_1.id
				FROM
					pets_health pets_health_1
				WHERE
					(
						pets_health_1.pet_id IN (
							SELECT
								pets.id
							FROM
								pets
							WHERE
								(pets.user_id = auth.uid())
						)
					)
			)
		)
	);

create policy "update_pet_vaccines" on "public"."health_medicines" as permissive for
update
	to authenticated using (
		(
			health_id IN (
				SELECT
					pets_health_1.id
				FROM
					pets_health pets_health_1
				WHERE
					(
						pets_health_1.pet_id IN (
							SELECT
								pets.id
							FROM
								pets
							WHERE
								(pets.user_id = auth.uid())
						)
					)
			)
		)
	) with check (true);

create policy "Enable read access for all users" on "public"."health_vaccines" as permissive for
select
	to authenticated using (true);

create policy "delete_pet_vaccines" on "public"."health_vaccines" as permissive for delete to public using (
	(
		health_id IN (
			SELECT
				pets_health_1.id
			FROM
				pets_health pets_health_1
			WHERE
				(
					pets_health_1.pet_id IN (
						SELECT
							pets.id
						FROM
							pets
						WHERE
							(pets.user_id = auth.uid())
					)
				)
		)
	)
);

create policy "insert_pet_vaccines" on "public"."health_vaccines" as permissive for
insert
	to public with check (
		(
			health_id IN (
				SELECT
					pets_health_1.id
				FROM
					pets_health pets_health_1
				WHERE
					(
						pets_health_1.pet_id IN (
							SELECT
								pets.id
							FROM
								pets
							WHERE
								(pets.user_id = auth.uid())
						)
					)
			)
		)
	);

create policy "update_pet_vaccines" on "public"."health_vaccines" as permissive for
update
	to public using (
		(
			health_id IN (
				SELECT
					pets_health_1.id
				FROM
					pets_health pets_health_1
				WHERE
					(
						pets_health_1.pet_id IN (
							SELECT
								pets.id
							FROM
								pets
							WHERE
								(pets.user_id = auth.uid())
						)
					)
			)
		)
	) with check (true);

create policy "Enable read access for all users" on "public"."locale_cities" as permissive for
select
	to public using (true);

create policy "Enable read access for all users" on "public"."locale_countries" as permissive for
select
	to public using (true);

create policy "Enable read access for all users" on "public"."locale_states" as permissive for
select
	to public using (true);

create policy "Enable delete for users based on user_id" on "public"."pets" as permissive for delete to authenticated using ((auth.uid() = user_id));

create policy "Enable insert for authenticated users only" on "public"."pets" as permissive for
insert
	to authenticated with check (true);

create policy "Enable select for users based on user_id" on "public"."pets" as permissive for
select
	to authenticated using ((auth.uid() = user_id));

create policy "Enable update for users based on email" on "public"."pets" as permissive for
update
	to authenticated using ((auth.uid() = user_id)) with check ((auth.uid() = user_id));

create policy "Enable read access for all users" on "public"."pets_health" as permissive for
select
	to authenticated using (true);

create policy "New pets_health" on "public"."pets_health" as permissive for
insert
	to authenticated with check (true);

create policy "pets_health_update_user_policy" on "public"."pets_health" as permissive for
update
	to public using (
		(
			id IN (
				SELECT
					pets_health_1.id
				FROM
					pets_health pets_health_1
				WHERE
					(
						pets_health_1.pet_id IN (
							SELECT
								pets.id
							FROM
								pets
							WHERE
								(pets.user_id = auth.uid())
						)
					)
			)
		)
	) with check (true);

create policy "Enable delete for authenticated user and if user is it's owner" on "public"."pets_walks" as permissive for delete to authenticated using (
	(
		pet_id IN (
			SELECT
				pets.id
			FROM
				pets
			WHERE
				(pets.user_id = auth.uid())
		)
	)
);

create policy "Enable insert for authenticated user and if user is its owner" on "public"."pets_walks" as permissive for
insert
	to authenticated with check (
		(
			pet_id IN (
				SELECT
					pets.id
				FROM
					pets
				WHERE
					(pets.user_id = auth.uid())
			)
		)
	);

create policy "Enable read access only for rows that are of authenticated user" on "public"."pets_walks" as permissive for
select
	to authenticated using (
		(
			auth.uid() IN (
				SELECT
					pets.user_id
				FROM
					pets
				WHERE
					(pets.user_id = auth.uid())
			)
		)
	);

create policy "Public profiles are viewable by everyone." on "public"."profiles" as permissive for
select
	to public using (true);

create policy "Users can insert their own profile." on "public"."profiles" as permissive for
insert
	to public with check ((auth.uid() = id));

create policy "Users can update own profile." on "public"."profiles" as permissive for
update
	to public using ((auth.uid() = id));

create policy "Enable read access for all users" on "public"."vaccines_doses" as permissive for
select
	to authenticated using (true);

create policy "delete_vaccines_doses" on "public"."vaccines_doses" as permissive for delete to public using (
	(
		vaccine_id IN (
			SELECT
				health_vaccines.id
			FROM
				health_vaccines
			WHERE
				(
					health_vaccines.health_id IN (
						SELECT
							pets_health_1.id
						FROM
							pets_health pets_health_1
						WHERE
							(
								pets_health_1.pet_id IN (
									SELECT
										pets.id
									FROM
										pets
									WHERE
										(pets.user_id = auth.uid())
								)
							)
					)
				)
		)
	)
);

create policy "insert_vaccines_doses" on "public"."vaccines_doses" as permissive for
insert
	to public with check (
		(
			vaccine_id IN (
				SELECT
					health_vaccines.id
				FROM
					health_vaccines
				WHERE
					(
						health_vaccines.health_id IN (
							SELECT
								pets_health_1.id
							FROM
								pets_health pets_health_1
							WHERE
								(
									pets_health_1.pet_id IN (
										SELECT
											pets.id
										FROM
											pets
										WHERE
											(pets.user_id = auth.uid())
									)
								)
						)
					)
			)
		)
	);

create policy "update_vaccines_doses" on "public"."vaccines_doses" as permissive for
update
	to public using (
		(
			vaccine_id IN (
				SELECT
					health_vaccines.id
				FROM
					health_vaccines
				WHERE
					(
						health_vaccines.health_id IN (
							SELECT
								pets_health_1.id
							FROM
								pets_health pets_health_1
							WHERE
								(
									pets_health_1.pet_id IN (
										SELECT
											pets.id
										FROM
											pets
										WHERE
											(pets.user_id = auth.uid())
									)
								)
						)
					)
			)
		)
	) with check (true);

CREATE TRIGGER handle_updated_at BEFORE
UPDATE
	ON public.animal_types FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER handle_updated_at BEFORE
UPDATE
	ON public.breeds FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER handle_updated_at BEFORE
UPDATE
	ON public.health_medicines FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER handle_updated_at BEFORE
UPDATE
	ON public.health_vaccines FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER handle_updated_at BEFORE
UPDATE
	ON public.map_places FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER handle_updated_at BEFORE
UPDATE
	ON public.pets FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER handle_updated_at BEFORE
UPDATE
	ON public.pets_health FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER handle_updated_at BEFORE
UPDATE
	ON public.pets_walks FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER handle_updated_at BEFORE
UPDATE
	ON public.vaccines_doses FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER handle_updated_at BEFORE
UPDATE
	ON public.profiles FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

alter table
	"storage"."objects" drop constraint if exists "objects_owner_fkey";

drop trigger if exists "handle_updated_at" on "public"."animal_types";

drop trigger if exists "handle_updated_at" on "public"."breeds";

drop policy "Enable read access for all users" on "public"."animal_types";

drop policy "Enable insert for authenticated users only" on "public"."breeds";

drop policy "Enable read access for all users" on "public"."breeds";

drop policy "Enable update for users based on email" on "public"."breeds";

drop policy "delete_pet_medicines" on "public"."health_medicines";

drop policy "insert_pet_medicines" on "public"."health_medicines";

drop policy "update_pet_vaccines" on "public"."health_medicines";

drop policy "delete_pet_vaccines" on "public"."health_vaccines";

drop policy "insert_pet_vaccines" on "public"."health_vaccines";

drop policy "update_pet_vaccines" on "public"."health_vaccines";

drop policy "Enable read access for all users" on "public"."pets_health";

drop policy "New pets_health" on "public"."pets_health";

drop policy "pets_health_update_user_policy" on "public"."pets_health";

drop policy "delete_vaccines_doses" on "public"."vaccines_doses";

drop policy "insert_vaccines_doses" on "public"."vaccines_doses";

drop policy "update_vaccines_doses" on "public"."vaccines_doses";

alter table
	"public"."breeds" drop constraint "breeds_animal_type_fkey";

alter table
	"public"."health_medicines" drop constraint "health_medicines_health_id_fkey";

alter table
	"public"."health_vaccines" drop constraint "health_vaccines_health_id_fkey";

alter table
	"public"."pets" drop constraint "pets_breed_id_old_fkey";

alter table
	"public"."pets_health" drop constraint "pets_health_pet_id_fkey";

alter table
	"public"."pets_health" drop constraint "pets_health_pet_id_key";

alter table
	"public"."pets_health" drop constraint if exists "pets_health_users_id_fk";

alter table
	"public"."pets_health" drop constraint if exists "pets_health_users_id_fk_2";

alter table
	"public"."animal_types" drop constraint "animal_types_pkey";

alter table
	"public"."breeds" drop constraint "breeds_pkey";

alter table
	"public"."pets_health" drop constraint "pets_health_pkey";

alter table
	"public"."health_medicines"
add
	column "created_by" uuid not null;

alter table
	"public"."health_medicines"
add
	column "updated_by" uuid not null;

alter table
	"public"."health_vaccines"
add
	column "created_by" uuid not null;

alter table
	"public"."health_vaccines"
add
	column "updated_by" uuid not null;

alter table
	"public"."health_medicines"
add
	constraint "health_medicines_users_id_fk" FOREIGN KEY (created_by) REFERENCES auth.users(id) not valid;

alter table
	"public"."health_medicines" validate constraint "health_medicines_users_id_fk";

alter table
	"public"."health_medicines"
add
	constraint "health_medicines_users_id_fk_2" FOREIGN KEY (updated_by) REFERENCES auth.users(id) not valid;

alter table
	"public"."health_medicines" validate constraint "health_medicines_users_id_fk_2";

alter table
	"public"."health_vaccines"
add
	constraint "health_vaccines_users_id_fk" FOREIGN KEY (created_by) REFERENCES auth.users(id) not valid;

alter table
	"public"."health_vaccines" validate constraint "health_vaccines_users_id_fk";

alter table
	"public"."health_vaccines"
add
	constraint "health_vaccines_users_id_fk_2" FOREIGN KEY (updated_by) REFERENCES auth.users(id) not valid;

alter table
	"public"."health_vaccines" validate constraint "health_vaccines_users_id_fk_2";

alter table
	"public"."pets"
add
	column "created_by" uuid not null;

alter table
	"public"."pets"
add
	column "updated_by" uuid not null;

alter table
	"public"."pets"
add
	constraint "pets_users_id_fk" FOREIGN KEY (created_by) REFERENCES auth.users(id) not valid;

alter table
	"public"."pets" validate constraint "pets_users_id_fk";

alter table
	"public"."pets"
add
	constraint "pets_users_id_fk_2" FOREIGN KEY (updated_by) REFERENCES auth.users(id) not valid;

alter table
	"public"."pets" validate constraint "pets_users_id_fk_2";

alter table
	"public"."pets_health"
add
	column "created_by" uuid not null;

alter table
	"public"."pets_health"
add
	column "updated_by" uuid not null;

alter table
	"public"."pets_health"
add
	constraint "pets_health_users_id_fk" FOREIGN KEY (created_by) REFERENCES auth.users(id) not valid;

alter table
	"public"."pets_health" validate constraint "pets_health_users_id_fk";

alter table
	"public"."pets_health"
add
	constraint "pets_health_users_id_fk_2" FOREIGN KEY (updated_by) REFERENCES auth.users(id) not valid;

alter table
	"public"."pets_health" validate constraint "pets_health_users_id_fk_2";

alter table
	"public"."pets_walks"
add
	column "created_by" uuid not null;

alter table
	"public"."pets_walks"
add
	column "updated_by" uuid not null;

alter table
	"public"."pets_walks"
add
	constraint "pets_walks_users_id_fk" FOREIGN KEY (created_by) REFERENCES auth.users(id) not valid;

alter table
	"public"."pets_walks" validate constraint "pets_walks_users_id_fk";

alter table
	"public"."pets_walks"
add
	constraint "pets_walks_users_id_fk_2" FOREIGN KEY (updated_by) REFERENCES auth.users(id) not valid;

alter table
	"public"."pets_walks" validate constraint "pets_walks_users_id_fk_2";

alter table
	"public"."pets_photos" drop constraint "pets_photos_pet_id_fkey";

alter table
	"public"."pets_photos" drop constraint "pets_photos_pkey";

drop index if exists "public"."pets_photos_pkey";

drop table "public"."animal_types";

drop table "public"."breeds";

drop table "public"."pets_photos";

alter table
	"public"."map_places" enable row level security;

create policy "Disable delete for all users" on "public"."map_places" as permissive for delete to public using (false);

create policy "Disable insert for all users" on "public"."map_places" as permissive for
insert
	to public with check (false);

create policy "Disable update for all users" on "public"."map_places" as permissive for
update
	to public using (false) with check (false);

create policy "Enable select for authenticated users only" on "public"."map_places" as permissive for
select
	to authenticated using (true);

alter table
	"public"."map_places"
add
	column "details" jsonb not null default '{"latLng": [], "address": ""}' :: jsonb;

set
	check_function_bodies = off;

CREATE
OR REPLACE FUNCTION public.handle_new_user() RETURNS trigger LANGUAGE plpgsql SECURITY DEFINER
SET
	search_path TO 'public' AS $$ begin
insert into
	public.profiles (
		id,
		full_name,
		birth_date,
		gender,
		user_name,
		avatar_url
	)
values
	(
		new.id,
		COALESCE(
			NULLIF(new.raw_user_meta_data ->> 'full_name', ''),
			new.email
		),
		new.created_at,
		3,
		COALESCE(
			NULLIF(new.raw_user_meta_data ->> 'user_name', ''),
			new.raw_user_meta_data ->> 'name'
		),
		new.raw_user_meta_data ->> 'avatar_url'
	);

return new;

end;

$$;

CREATE
OR REPLACE FUNCTION public.check_pet_owner(pet_id uuid, auth_user_id uuid) RETURNS boolean LANGUAGE plpgsql AS $$ BEGIN RETURN EXISTS (
	SELECT
		1
	FROM
		public.pets
	WHERE
		id = pet_id
		AND user_id = auth_user_id
);

END;

$$;

CREATE
OR REPLACE FUNCTION public.create_pet_health_record() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN
INSERT INTO
	pets_health (
		pet_id,
		weight,
		length,
		height,
		created_at,
		updated_at,
		created_by,
		updated_by
	)
VALUES
	(
		NEW.id,
		0,
		0,
		0,
		now(),
		now(),
		NEW.created_by,
		NEW.updated_by
	);

RETURN NEW;

END;

$$;

CREATE
OR REPLACE FUNCTION public.get_pet_user_id(uid uuid) RETURNS TABLE(row_id uuid) LANGUAGE sql AS $$
SELECT
	id
FROM
	public.pets
WHERE
	user_id = $ 1;

$$;

CREATE TRIGGER on_auth_user_created
AFTER
INSERT
	ON auth.users FOR EACH ROW EXECUTE FUNCTION handle_new_user();

CREATE TRIGGER after_insert_pet
AFTER
INSERT
	ON public.pets FOR EACH ROW EXECUTE FUNCTION create_pet_health_record();

CREATE UNIQUE INDEX pets_health_pk ON public.pets_health USING btree (id);

alter table
	"public"."pets_health"
add
	constraint "pets_health_pk" PRIMARY KEY using index "pets_health_pk";

alter table
	"public"."health_medicines"
add
	constraint "health_medicines_pets_health_id_fk" FOREIGN KEY (health_id) REFERENCES pets_health(id) ON DELETE CASCADE not valid;

alter table
	"public"."health_medicines" validate constraint "health_medicines_pets_health_id_fk";

alter table
	"public"."health_vaccines"
add
	constraint "health_vaccines_pets_health_id_fk" FOREIGN KEY (health_id) REFERENCES pets_health(id) ON DELETE CASCADE not valid;

alter table
	"public"."health_vaccines" validate constraint "health_vaccines_pets_health_id_fk";

alter table
	"public"."pets_health"
add
	constraint "pets_health_pets_id_fk" FOREIGN KEY (pet_id) REFERENCES pets(id) ON DELETE CASCADE not valid;

alter table
	"public"."pets_health" validate constraint "pets_health_pets_id_fk";